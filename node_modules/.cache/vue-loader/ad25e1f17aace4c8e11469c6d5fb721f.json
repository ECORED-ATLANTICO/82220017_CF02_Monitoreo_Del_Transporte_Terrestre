{"remainingRequest":"/home/runner/work/82220017_CF02_Monitoreo_Del_Transporte_Terrestre/82220017_CF02_Monitoreo_Del_Transporte_Terrestre/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/82220017_CF02_Monitoreo_Del_Transporte_Terrestre/82220017_CF02_Monitoreo_Del_Transporte_Terrestre/src/views/Tema4.vue?vue&type=template&id=baf6c032&lang=pug","dependencies":[{"path":"/home/runner/work/82220017_CF02_Monitoreo_Del_Transporte_Terrestre/82220017_CF02_Monitoreo_Del_Transporte_Terrestre/src/views/Tema4.vue","mtime":1756095187172},{"path":"/home/runner/work/82220017_CF02_Monitoreo_Del_Transporte_Terrestre/82220017_CF02_Monitoreo_Del_Transporte_Terrestre/node_modules/cache-loader/dist/cjs.js","mtime":1756095208955},{"path":"/home/runner/work/82220017_CF02_Monitoreo_Del_Transporte_Terrestre/82220017_CF02_Monitoreo_Del_Transporte_Terrestre/node_modules/cache-loader/dist/cjs.js","mtime":1756095208955},{"path":"/home/runner/work/82220017_CF02_Monitoreo_Del_Transporte_Terrestre/82220017_CF02_Monitoreo_Del_Transporte_Terrestre/node_modules/babel-loader/lib/index.js","mtime":1756095209525},{"path":"/home/runner/work/82220017_CF02_Monitoreo_Del_Transporte_Terrestre/82220017_CF02_Monitoreo_Del_Transporte_Terrestre/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1756095209973},{"path":"/home/runner/work/82220017_CF02_Monitoreo_Del_Transporte_Terrestre/82220017_CF02_Monitoreo_Del_Transporte_Terrestre/node_modules/pug-plain-loader/index.js","mtime":1756095208762},{"path":"/home/runner/work/82220017_CF02_Monitoreo_Del_Transporte_Terrestre/82220017_CF02_Monitoreo_Del_Transporte_Terrestre/node_modules/cache-loader/dist/cjs.js","mtime":1756095208955},{"path":"/home/runner/work/82220017_CF02_Monitoreo_Del_Transporte_Terrestre/82220017_CF02_Monitoreo_Del_Transporte_Terrestre/node_modules/vue-loader/lib/index.js","mtime":1756095209635}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}